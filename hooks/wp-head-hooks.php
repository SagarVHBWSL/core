<?php
/**
 * FIXME: Edit Title Content
 *
 * FIXME: Edit Description Content
 *
 * Please do not edit this file. This file is part of the Cyber Chimps Framework and all modifications
 * should be made in a child theme.
 * FIXME: POINT USERS TO DOWNLOAD OUR STARTER CHILD THEME AND DOCUMENTATION
 *
 * @category Cyber Chimps Framework
 * @package  Framework
 * @since    1.0
 * @author   CyberChimps
 * @license  http://www.opensource.org/licenses/gpl-license.php GPL v2.0 (or later)
 * @link     http://www.cyberchimps.com/
 */

// TODO This would be better if we rename the option keys at the form so these functions can automate adding the styles to the header

// adds styles to header created from functions at the bottom
 function cyberchimps_css_styles() {
	$body_styles = cyberchimps_body_styles(); 
  $link_styles = cyberchimps_link_styles();
	$container_styles = cyberchimps_layout_styles();?>
  
  <style type="text/css" media="all">
	<?php if ( !empty( $body_styles ) ) : ?>
  body {
    	<?php foreach( $body_styles as $key => $body_style ): ?>
      	<?php echo $key; ?>: <?php echo $body_style; ?>;     
    	<?php endforeach; ?>
  }
  <?php endif; ?>
  <?php if ( !empty( $link_styles ) ) : ?>
  	<?php foreach( $link_styles as $key2 => $link_style ): ?>
  <?php echo $key2; ?>{
    color: <?php echo $link_style; ?>;
  }
  <?php endforeach; ?>
  <?php endif; ?>
  <?php if ( !empty( $container_styles ) ) : ?>
  .container {
    <?php foreach( $container_styles as $key3 => $container_style ): ?>
    <?php echo $key3; ?>: <?php echo $container_style; ?>px;
    <?php endforeach; ?>
  }
  <?php endif; ?>
  </style>
<?php
	return;
}
add_action( 'wp_head', 'cyberchimps_css_styles', 10 );

// creates body_styles array from options
function cyberchimps_body_styles() {
	$body_styles = array();
	if ( cyberchimps_get_option( 'background_colorpicker' ) ) {
		$body_styles['background-color'] = cyberchimps_get_option( 'background_colorpicker' );
	}
	if ( cyberchimps_get_option( 'text_colorpicker' ) ) {
		$body_styles['color'] = cyberchimps_get_option( 'text_colorpicker' );
	}
	if ( cyberchimps_get_option( 'typography_options' ) ) {
		$typography_options = cyberchimps_get_option( 'typography_options' );
		// changes terminology for typography to css elements
		foreach( $typography_options as $option => $value ) {
			if( $option == 'size' ) { $option = 'font-size'; }
			if( $option == 'face' ) { $option = 'font-family'; }
			if( $option == 'style' ) { $option = 'font-weight'; }
			if( $value != '' ) {
				$body_styles[$option] = $value;
			}
		}
	}
	if ( cyberchimps_get_option( 'select_background' ) && cyberchimps_get_option( 'select_background' ) != 'none' ) {
		$body_styles['background-image'] = 'url( "'.get_template_directory_uri().'/core/lib/images/backgrounds/'.cyberchimps_get_option( 'select_background' ).'.jpg" )';
	}
	
	// Apply custom background image
	if( cyberchimps_get_option( 'custom_background' ) == 1 && cyberchimps_get_option( 'custom_background_image' ) != "" ) {
		$body_styles['background-image'] = 'url( "'.cyberchimps_get_option( 'custom_background_image' ).'" )';
	}
	
	return $body_styles;
}

// creates link color array for just a tag
function cyberchimps_link_styles() {
	$link_styles = array();
	if ( cyberchimps_get_option( 'link_colorpicker' ) ) {
		$link_styles['a'] = cyberchimps_get_option( 'link_colorpicker' );
	}
	if ( cyberchimps_get_option( 'link_hover_colorpicker' ) ) {
		$link_styles['a:hover'] = cyberchimps_get_option( 'link_hover_colorpicker' );
	}
	
	return $link_styles;
}

// creates width for main container of website
function cyberchimps_layout_styles() {
	$container_styles = array();
	if ( cyberchimps_get_option( 'max_width' ) ) {
		$width = intval( cyberchimps_get_option( 'max_width' ) );
		$key = ( cyberchimps_get_option( 'responsive_design' ) ) ? 'max-width' : 'width';
		if ( $width < 400 || empty( $width ) ) { 
			$container_styles[$key] = 1020;
		}
		else {
			$container_styles[$key] = $width;
		}
	}
	
	return $container_styles;
}