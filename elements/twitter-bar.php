<?php
/**
 * TODO: Edit Title Content
 *
 * TODO: Edit Description Content
 *
 * Please do not edit this file. This file is part of the Response core framework and all modifications
 * should be made in a child theme. TODO: POINT USERS TO DOWNLOAD OUR STARTER CHILD THEME AND DOCUMENTATION
 *
 * @category Response
 * @package  Framework
 * @since    1.0
 * @author   CyberChimps
 * @license  http://www.opensource.org/licenses/gpl-license.php GPL v2.0 (or later)
 * @link     http://www.cyberchimps.com/
 */

//TODO: Go through all of the following code and fix any issues. Set namespace and apply translations, hooks, and filters

// TODO: Fix documentation
function response_twitter_bar_element() {
	// TODO: Temporary until options are saved
	$user_details = array(
		'screen_name' => 'BenRMueller',
		'count' => '5',
		'published_when' => '1',
		'show_replies' => ''
	);
	$latest_tweet = get_tweets( $user_details );
	?>
	<div id="twitter-bar" class="row-fluid">
		<div id="twitter-text" class="span12">
			<?php
				if ( $latest_tweet ) {	
					$screen_name = $latest_tweet[0]->user->screen_name;
					$user_permalink = 'http://twitter.com/#!/'.$screen_name;
					$tweet_permalink = 'http://twitter.com/#!/'.$screen_name.'/status/'.$latest_tweet[0]->id_str;
					// TODO: Twitter image missing
					echo '<a href="'.$user_permalink.'"> <img src="'.get_template_directory_uri().'/library/images/twitterbird.png" /> '. $screen_name .' - </a>'.$latest_tweet[0]->text.' <small><a href="'.$tweet_permalink.'">' .human_time_diff(strtotime($latest_tweet[0]->created_at), current_time('timestamp')).' ago</a></small>';
				} else {
					echo apply_filters('response_tweets_empty_message', '<p>'.__('No tweets to display', 'response').'</p>');
				}
			?>
		</div><!-- #twitter-text .span12 -->
	</div><!-- #twitter-bar .row-fluid -->
	<?php
}
add_action ( 'response_twitter_bar', 'response_twitter_bar_element' );


// TODO: Fix documentation
function retrieve_remote_tweets($request_url) {
	$raw_response = wp_remote_get( $request_url, array( 'sslverify' => false, 'timeout' => 1 ) );

	if ( is_wp_error( $raw_response ) )
		return $raw_response;

	$code = (int) wp_remote_retrieve_response_code($raw_response);
	$response = json_decode( wp_remote_retrieve_body($raw_response) );

	switch( $code ):
		case 200:
			return $response;

		case 304:
		case 400:
		case 401:
		case 403:
		case 404:
		case 406:
		case 420:
		case 500:
		case 502:
		case 503:
		case 504:
			return new WP_Error($code, $response->error);

		default:
			return new WP_Error($code, __('Invalid response','response'));
	endswitch;
}

// TODO: Fix documentation
function set_twitter_transient($key, $data, $expiration) {
	// Time when transient expires
	$expire = time() + $expiration;
	set_transient( $key, array( $expire, $data ) );
}

// TODO: Fix documentation
function get_tweets($args) {
	// Build request URL
	// TODO: Filter @ sign out if it is there and then add it back
	$args['screen_name'] = '@'.$args['screen_name'];
	$request_url = 'https://api.twitter.com/1/statuses/user_timeline.json';
	$request_url = add_query_arg($args,$request_url);

	// Generate key
	$key = 'response_twitter_'.md5($request_url);

	// expires every hour
	$expiration = 60*60;

	$transient = get_transient( $key );
	if ( false === $transient ) {
		// Hard expiration
		$data = retrieve_remote_tweets( $request_url );

		if ( !is_wp_error($data) ) {
			// Update transient
			set_twitter_transient($key, $data, $expiration);
		}
		return $data;

	} else {
		// Soft expiration. $transient = array( expiration time, data)
		if ( $transient[0] !== 0 && $transient[0] <= time() ) {

			// Expiration time passed, attempt to get new data
			$new_data = retrieve_remote_tweets( $request_url  );

			if ( !is_wp_error($new_data) ) {
				// If successful return update transient and new data
				set_twitter_transient($key, $new_data,  $expiration);
				$transient[1] = $new_data;
			}
		}
		return $transient[1];
	}
}