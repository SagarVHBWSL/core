<?php
/**
 * Class Cyberchimps_Meta_Box
 *
 * Please do not edit this file. This file is part of the CyberChimps Framework and all modifications
 * should be made in a child theme.
 *
 * @category CyberChimps Framework
 * @package  Framework
 * @since    1.0
 * @author   CyberChimps
 * @license  http://www.opensource.org/licenses/gpl-license.php GPL v2.0 (or later)
 * @link     http://www.cyberchimps.com/
 */

class Cyberchimps_Meta_Box {

    public $sections;
    public $fields;
    public $errors;

    public function __construct( $sections, $fields ) {
        $this->sections = $sections;
        $this->fields   = $fields;

        add_action( 'save_post', array( &$this, 'save' ) );
//        add_action( 'admin_notices', array( &$this, 'admin_notice' ) );

    }

    public function render_display() {

        foreach( $this->sections as $section ) {

            $fields = $this->fields;
            add_meta_box( $section['id'], $section['title'], array( &$this, 'render_section' ), $section['post_type'], $section['context'], $section['priority'],
                          array( 'fields' => $fields[$section['id']] ) );
        }
    }

    public function render_section( $post, $args ) {
        global $post;

        wp_nonce_field( 'cyberchimps_meta_save_' . $args['id'], 'cyberchimps_meta_nonce_' . $args['id'] );

        echo '<table class="form-table">';

        foreach( $args['args']['fields'] as $field ) {
            $meta = get_post_meta( $post->ID, $field['id'], !( isset( $field['multiple'] ) && $field['multiple'] ) );
            $meta = ( !empty( $meta ) || $meta === "0" ) ? $meta : ( isset( $field['std'] ) ? $field['std'] : '' );

            $this->field_start( $field );
            call_user_func( array( &$this, 'input_' . $field['type'] ), $field, $meta );
            $this->field_end();
        }
        echo '</table>';
    }

    public function render_fields() {

    }

    protected function field_start( $args ) {
        echo "<tr><th style='width: 20%'><label for='{$args['id']}'>{$args['title']}</label></th><td>";
    }

    protected function field_end() {
        echo '</td></tr>';
    }

    protected function input_text( $args, $meta ) {
        echo "<input type='text' name='{$args['id']}' id='{$args['id']}' value='{$meta}' size='30' style='width:60%' />";
    }

    protected function input_image_select( $field, $meta ) {

        echo "<div class='image_select'>";
        foreach( $field['options'] as $key => $option ) {
            echo "<img data-key='{$key}' class='" . ( $key == $meta ? ' selected' : '' ) . "' src='{$option}' />";
        }
        echo "<input type='hidden' name='{$field['id']}' />";
        echo "</div>";

    }

    protected function input_checkbox( $field, $meta ) {
        echo "<input type='checkbox' class='checkbox' name='{$field['id']}' id='checkbox-{$field['id']}' " . checked( $meta, 1, false ) . " value='1'/> {$field['desc']}</td>";
    }

    protected function input_section_order( $field, $meta ) {
        //Define image path
        $image_path = get_template_directory_uri() . "/cyberchimps/lib/images/";

        echo "<div class='section-order' id=" . esc_attr( $field['id'] ) . ">";
        echo "<div class='left-list'>";
        echo "<div id='inactive'>Inactive Elements</div>";
        echo "<ul id='left_list' class='list-items'>";

        foreach( $field['options'] as $key => $option ) {
            if( is_array( $meta ) ) {
                if( in_array( $key, $meta ) ) {
                    continue;
                }
            }
            echo "<li class='list-item'>";
            echo '<img src="' . $image_path . 'minus.png" class="action" title="Remove"/>';
            echo "<span data-key='{$key}'>{$option}</span>";
            echo "</li>";
        }
        echo "</div>";
        echo '<div id="arrow"><img src="' . $image_path . 'arrowdrag.png" /></div>';
        echo "<div class='right-list'>";
        echo "<div id='active'>Active Elements</div>";
        echo "<ul id='right_list' class='list-items'>";

        if( !is_array( $meta ) ) {
            $meta = array( $meta );
        }

        foreach( $meta as $option ) {
            if( !array_key_exists( $option, $field['options'] ) ) {
                continue;
            }
            echo "<li class='list-item'>";
            echo '<img src="' . $image_path . 'minus.png" class="action" title="Remove"/>';
            echo '<span data-key="' . $option . '">' . $field['options'][$option] . '</span>';
            echo "</li>";
        }

        echo "</div>";
        echo "</div>";
        echo "<input class='section-order-tracker' type='hidden' id={$field['id']} name={$field['id']} />";
        echo "</div>";
    }

    public function save( $post_id ) {

        print_r( 'Curabitur blandit tempus porttitor. Maecenas sed diam eget risus varius blandit sit amet non magna.' );

        if( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) {
            return;
        }

        foreach( $this->sections as $section ) {
            if( !isset( $_POST['cyberchimps_meta_nonce_' . $section['id']] ) || !wp_verify_nonce( $_POST['cyberchimps_meta_nonce_' . $section['id']],
                                                                                                  'cyberchimps_meta_save_' . $section['id'] )
            ) {
                return;
            }
        }

        // Make sure meta is added to the post, not a revision
        if( $the_post = wp_is_post_revision( $post_id ) ) {
            $post_id = $the_post;
        }

        // Save post action removed to prevent infinite loops
        remove_action( 'save_post', array( $this, 'save' ) );

        if( !current_user_can( 'edit_post', $post_id ) ) {
            return;
        }

        foreach( $this->fields as $fields ) {
            foreach( $fields as $field ) {
                $name = $field['id'];
                $type = $field['type'];
                $old  = get_post_meta( $post_id, $name, !( isset( $field['multiple'] ) && $field['multiple'] ) );
                $new  = isset( $_POST[$name] ) ? $_POST[$name] : ( ( isset( $field['multiple'] ) && $field['multiple'] ) ? array() : '' );

                if( method_exists( get_class(), 'sanitize_' . $type ) ) {
                    $new = call_user_func( array( &$this, 'sanitize_' . $type ), $new );
                }
                else {
                    $this->errors( __( 'There is a problem with sanitizing that data type' ) );

                    return;
                }

            }
        }

    }

//    public function sanitize_text( $new ) {
//        print_r( 'TEXT' );
//    }
//
//    public function sanitize_image_select( $new ) {
//        print_r( 'IMAGE' );
//    }
//
//    public function sanitize_checkbox( $new ) {
//        print_r( 'CHECK' );
//    }
//
//    public function sanitize_section_order( $new ) {
//        print_r( 'SECTION' );
//    }
//
//    protected function errors( $message, $data = null ) {
//        $this->errors = new WP_Error( 'cyberchimps_meta_error', $message, $data );
//    }
//
//    public function admin_notice() {
//        global $pagenow;
//
//        if( is_wp_error( $this->errors ) ) {
//        $errors = $this->errors->get_error_messages( 'cyberchimps_meta_error' );
//        if ( $pagenow == 'post.php' ) {
//        $display = '<div class="updated">
//                    <p>This notice only appears on the plugins page.</p>
//                    </div>';
//
//        return $display;
//        }
//        }
//    }
}