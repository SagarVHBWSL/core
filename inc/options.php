<?php
/**
 * FIXME: Edit Title Content
 *
 * FIXME: Edit Description Content
 *
 * Please do not edit this file. This file is part of the Response core framework and all modifications
 * should be made in a child theme.
 * FIXME: POINT USERS TO DOWNLOAD OUR STARTER CHILD THEME AND DOCUMENTATION
 *
 * @category Response
 * @package  Framework
 * @since    1.0
 * @author   CyberChimps
 * @license  http://www.opensource.org/licenses/gpl-license.php GPL v2.0 (or later)
 * @link     http://www.cyberchimps.com/
 */


// TODO: Add entire code to Class

// TODO: Call all other global variables here. It will probably become the construct__ function
// TODO: Apply filter here

// create the admin menu for the theme options page
add_action('admin_menu', 'plugin_admin_add_page');
function plugin_admin_add_page() {
	
	// TODO: Add translations to Text
	$page = add_theme_page('Framework Options Page', 'Framework Options', 'edit_theme_options', 'plugin_theme_options', 'plugin_options_page');
	
	// TODO: Once Class is applied remove plugin_ slug on both calls
	add_action( "admin_print_styles-$page", 'plugin_load_styles');
	add_action( "admin_print_scripts-$page", 'plugin_load_scripts');
}

// TODO: Once Class is applied remove plugin_ slug
function plugin_load_styles() {
	wp_enqueue_style('color-picker', get_template_directory_uri().'/options/css/colorpicker.css');
	wp_enqueue_style('thickbox');
}

// TODO: Once Class is applied remove plugin_ slug
function plugin_load_scripts() {
	// Enqueued scripts
	wp_enqueue_script('jquery-ui-core');
	wp_enqueue_script('jquery-ui-sortable');
	wp_enqueue_script('thickbox');
	wp_enqueue_script('color-picker', get_template_directory_uri().'/options/js/colorpicker.js', array('jquery'));
	wp_enqueue_script('options-custom', get_template_directory_uri().'/options/js/options-custom.js', array('jquery'));
	wp_enqueue_script('media-uploader', get_template_directory_uri().'/options/js/of-medialibrary-uploader.js', array('jquery'));
}


// create and display theme options page
// TODO: Once Class is applied remove plugin_ slug
function plugin_options_page() {
	// TODO: Add translations to text
?>
	<div>
		<h2>Theme Options</h2>
		<form action="options.php" method="post">
		<?php settings_fields('plugin_options'); ?>
		<?php do_settings_sections('plugin'); ?>
		
		<input name="Submit" type="submit" value="<?php esc_attr_e('Save Changes'); ?>" />
		</form>
	</div>
<?php
}

// add core and theme settings to options page
add_action('admin_init', 'plugin_admin_init');
// TODO: Once Class is applied remove plugin_ slug
function plugin_admin_init(){
	
	// register theme options settings
	register_setting( 'plugin_options', 'plugin_options', 'plugin_options_validate' );
	
	// add all core settings
	// TODO: Once Class is applied remove plugin_ slug
	do_action('plugin_add_core_settings', $test);
	
	//var_dump($test);
	
	// add all theme settings
	// TODO: Once Class is applied remove plugin_ slug
	//do_action('plugin_add_theme_settings');
}


/* CORE FEATURES THAT NEED TO BE MOVED */
// TODO: Move to file in core folder
add_action('plugin_add_core_settings', 'plugin_add_core_settings');
// TODO: Once Class is applied remove plugin_ slug
function plugin_add_core_settings() {
	
	// TODO: Add all add_settings_* calls here for core features (options that will repeat across all themes)
	add_settings_section('plugin_core', 'Core Settings', 'plugin_core_section_text', 'plugin');
	
	// List of fields to add to options panel
	// TODO: Add translations to text
	$settings_list = array(
		array(
			'id' => 'core_color',
			'label' => 'Plugin Text Field',
			'section' => 'plugin_core',
			'field' => array(
				'type' => 'textarea',
				'default' => '#000000',
			)
 		),
 		array(
			'id' => 'core_text_string',
			'label' => 'Plugin Text Input',
			'section' => 'plugin_core',
			'field' => array(
				'type' => 'select',
				'default' => 1,
				'options' => array( 0 => 'False', 1 => 'True')
			)
 		),
 		array(
			'id' => 'core_radio',
			'label' => 'Plugin Radio Input',
			'section' => 'plugin_core',
			'field' => array(
				'type' => 'radio',
				'default' => 1,
				'options' => array( 0 => 'False', 1 => 'True')
			)
 		),
 		array(
 			'id' => 'core_test'
	 	)
	);
	
	create_setting_fields( $settings_list );
	
	return $settings_list;
}

function create_setting_fields( $settings ) {
	if ( empty($settings) )
		return false;
		
	// loop through and create each field
	foreach ($settings as $setting_args) {
		$setting_defaults = array(
			'id' => false,
			'label' => 'Default Field',
			'callback' => 'plugin_callback',
			'page' => 'plugin',
			'section' => 'plugin_core',
		);
		$setting_args = wp_parse_args( $setting_args, $setting_defaults );
		
		$field_defaults = array(
			'type' => 'text',
			'default' => '',
			'description' => '',
			'options' => array(),
			'settings' => array( 'size' => '', 'cols' => 24, 'rows' => 8 ),
		);
		//$setting_args['field'] = wp_parse_args( $setting_args['field'], $field_defaults );

		if ( !empty($setting_args['id']) ) {
			add_settings_field(
				'plugin_' . $setting_args['id'],
				$setting_args['label'],
				$setting_args['callback'],
				$setting_args['page'],
				$setting_args['section'],
				$setting_args
			);
		}
	}
}


function plugin_core_section_text() {
	echo '<p>All core settings and options</p>';
}

function plugin_callback( $args ) {

	$options = get_option('plugin_options');
	
	var_dump($args['field']);
	
	// set default value if not set
	$value = (isset($options[$args['id']])) ? $options[$args['id']] : $args['field']['default'];
	
	// TODO: REMOVE DEBUGGING
	var_dump($value);
	
	// TODO: create function to generate HTML markup. Base it off of Options Framework switch statements
	$output = '';
	switch ( $args['field']['type'] ) {
		// Basic text input
		case 'text':
			$output .= '<input class="of-input" id="'.esc_attr($args['id']).'" name="plugin_options['.esc_attr($args['id']).']" type="text" value="'.esc_attr($value).'" />';
		break;
		
		/* TODO: Clean*/
		// Textarea
		case 'textarea':

			$cols = (isset($args['field']['settings']['cols'])) ? $args['field']['settings']['cols'] : '24';
			$rows = (isset($args['field']['settings']['rows'])) ? $args['field']['settings']['rows'] : '8';
			$value = stripslashes( $value );
			
			$output .= '<textarea class="of-input" id="'.esc_attr($args['id']).'" name="plugin_options['.esc_attr($args['id']).']" cols="'.esc_attr($cols).'" rows="'.esc_attr($rows).'">'.esc_textarea($value).'</textarea>';
		break;
		
		// Select Box
		case 'select':
			$output .= '<select class="of-input" id="'.esc_attr($args['id']).'" name="plugin_options['.esc_attr($args['id']).']">';
			foreach ($args['field']['options'] as $key => $option ) {
				$output .= '<option'. selected($value, $key, false) .' value="'.esc_attr($key).'">'.esc_html($option).'</option>';
			}
			$output .= '</select>';
		break;
		
		// Radio Box
		case "radio":
			foreach ($args['field']['options'] as $key => $option) {
				$output .= '<input class="of-input of-radio" id="'.esc_attr($args['id']).'" name="plugin_options['.esc_attr($args['id']).']" type="radio" value="'.esc_attr($key).'" '. checked( $value, $key, false) .' /><label for="'.esc_attr($args['id']).'">'.esc_html($option).'</label><br />';
			}
		break;
		
		/* TODO: Clean
		// Image Selectors
		case "images":
			$name = $option_name .'['. $value['id'] .']';
			foreach ( $value['options'] as $key => $option ) {
				$selected = '';
				$checked = '';
				if ( $val != '' ) {
					if ( $val == $key ) {
						$selected = ' of-radio-img-selected';
						$checked = ' checked="checked"';
					}
				}
				$output .= '<input type="radio" id="' . esc_attr( $value['id'] .'_'. $key) . '" class="of-radio-img-radio" value="' . esc_attr( $key ) . '" name="' . esc_attr( $name ) . '" '. $checked .' />';
				$output .= '<div class="of-radio-img-label">' . esc_html( $key ) . '</div>';
				$output .= '<img src="' . esc_url( $option ) . '" alt="' . $option .'" class="of-radio-img-img' . $selected .'" onclick="document.getElementById(\''. esc_attr($value['id'] .'_'. $key) .'\').checked=true;" />';
			}
		break;
		*/
		
		// Checkbox
		case "checkbox":
			$output .= '<input class="checkbox of-input" id="'.esc_attr($args['id']).'" name="plugin_options['.esc_attr($args['id']).']" type="checkbox" '. checked( $value, 1, false) .' value="'.esc_attr($args['field']['options']).'"/>';
			$output .= '<label class="explain" for="'.esc_attr($args['id']).'">'.esc_attr($value).'</label>';
		break;
		
		// Multicheck
		case "multicheck":
			foreach ($value['options'] as $key => $option) {
				$checked = '';
				$label = $option;
				$option = preg_replace('/\W/', '', strtolower($key));

				$id = $option_name . '-' . $value['id'] . '-'. $option;
				$name = $option_name . '[' . $value['id'] . '][' . $option .']';

			    if ( isset($val[$option]) ) {
					$checked = checked($val[$option], 1, false);
				}

				$output .= '<input id="' . esc_attr( $id ) . '" class="checkbox of-input" type="checkbox" name="' . esc_attr( $name ) . '" ' . $checked . ' /><label for="' . esc_attr( $id ) . '">' . esc_html( $label ) . '</label><br />';
			}
		break;
		
		
		// Color picker
		case "color":
			$output .= '<div id="plugin_'.esc_attr($args['id'] . '_picker').'" class="colorSelector"><div style="'.esc_attr('background-color:'.$value).'"></div></div>';
			$output .= '<input class="of-color" id="'.esc_attr($args['id']).'" name="plugin_options['.esc_attr($args['id']).']" type="text" value="'.esc_attr($value).'" />';
		break; 
		
		/* TODO: Clean
		// Uploader
		case "upload":
			// $output .= optionsframework_medialibrary_uploader( $value['id'], $val, null ); // New AJAX Uploader using Media Library	
			if(isset($val['url'])) {
				$output .= "Preview: " . "<img src='{$val['url']}' width='350px' height='50px'/><br/>";
			}
			$output .= " &nbsp;&nbsp;&nbsp;&nbsp; URL <input type='text' name='{$value['id']}_text' size='72' value='" . (isset($val['url']) ? $val['url'] : "") . "'/>";
			$output .= " or upload File: <input type='file' id='{$value['id']}' name='{$value['id']}'>";
		break;
		*/
	}
	
	echo $output;
}

// validate our options
function plugin_options_validate($input) {
	
	// validate all core settings and return validated fields
	$newinput = apply_filters( 'plugin_validate_core_settings_filter', $input );
	
	// validate all theme settings and return validated fields
	//$newinput = apply_filters( 'plugin_validate_theme_settings_filter', $newinput );
	
	// return final value (TODO: Maybe add additional security filtering here in case user hasnt done anything)
	return $newinput;
}

// validate core options
add_filter( 'plugin_validate_core_settings_filter', 'plugin_validate_core_settings', 10, 1 );
function plugin_validate_core_settings($input) {
	
	$newinput = $input;
	
	// TODO: Add validation for fields
	$newinput['core_text_string'] = trim($newinput['core_text_string']);
	$newinput['core_text_field'] = trim($newinput['core_text_field']);
	$newinput['core_radio'] = trim($newinput['core_radio']);
	
	return $newinput;
}
/* END CORE FEATURES THAT NEED TO BE MOVED */






/* THEME FEATURES THAT NEED TO BE MOVED */
// TODO: Move to file in theme folder. This function does not need to exist.
add_action('plugin_add_theme_settings', 'plugin_add_theme_settings');
function plugin_add_theme_settings() {
	// TODO: Add all add_settings_* calls here for theme specific features (options that are specific to a theme)
	add_settings_section('plugin_theme', 'Theme Settings', 'plugin_theme_section_text', 'plugin');

	// List of fields to add to options panel
	$settings_list = array(
		array(
			'id' => 'theme_text_string',
			'label' => 'Plugin Text Field',
			'callback' => 'plugin_core_setting',
			'page' => 'plugin',
			'section' => 'plugin_theme',
			'type' => 'text',
			'default' => 'Default'
 		)
	);
	
	create_setting_fields( $settings_list );
}

function plugin_theme_section_text() {
	echo '<p>All theme settings and options</p>';
}

// validate theme options
add_filter( 'plugin_validate_theme_settings_filter', 'plugin_validate_theme_settings', 10, 1 );
function plugin_validate_theme_settings($input) {
	
	$newinput = $input;
	$newinput['theme_text_string'] = trim($newinput['theme_text_string']);
	
	// TODO: Add validation for field
	
	return $newinput;
}