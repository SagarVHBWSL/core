<?php
/**
 * FIXME: Edit Title Content
 *
 * FIXME: Edit Description Content
 *
 * Please do not edit this file. This file is part of the Response core framework and all modifications
 * should be made in a child theme.
 * FIXME: POINT USERS TO DOWNLOAD OUR STARTER CHILD THEME AND DOCUMENTATION
 *
 * @category Response
 * @package  Framework
 * @since    1.0
 * @author   CyberChimps
 * @license  http://www.opensource.org/licenses/gpl-license.php GPL v2.0 (or later)
 * @link     http://www.cyberchimps.com/
 */


// TODO: Add entire code to Class

// TODO: Call all other global variables here. It will probably become the construct__ function
// TODO: Apply filter here

/* If the user can't edit theme options, no use running this plugin */
add_action('init', 'response_edit_themes_role_check' );
function response_edit_themes_role_check() {
	if ( current_user_can( 'edit_theme_options' ) ) {
		// If the user can edit theme options, let the fun begin!
		add_action( 'admin_menu', 'response_admin_add_page');
		add_action( 'admin_init', 'response_admin_init' );
	}
}

// create the admin menu for the theme options page
add_action('admin_menu', 'response_admin_add_page');
function response_admin_add_page() {

	// TODO: Add translations to Text
	$page = add_theme_page('Framework Options Page', 'Framework Options', 'edit_theme_options', 'response_theme_options', 'response_options_page');
	
	// TODO: Once Class is applied remove response_ slug on both calls
	add_action( "admin_print_styles-$page", 'response_load_styles');
	add_action( "admin_print_scripts-$page", 'response_load_scripts');
}

function response_load_styles() {
	// TODO: Find better way to enqueque these scripts
	wp_register_style( 'bootstrap', get_template_directory_uri().'/core/lib/bootstrap/css/bootstrap.css' );
	wp_enqueue_style( 'bootstrap' );
	
	wp_register_style( 'bootstrap-responsive', get_template_directory_uri().'/core/lib/bootstrap/css/bootstrap-responsive.css', 'bootstrap' );
	wp_enqueue_style( 'bootstrap-responsive' );
	
	wp_enqueue_style( 'plugin_option_styles', get_template_directory_uri().'/core/lib/css/options-style.css', array( 'bootstrap', 'bootstrap-responsive' ) );
	
	wp_enqueue_style('color-picker', get_template_directory_uri().'/core/lib/css/colorpicker.css');
	wp_enqueue_style('thickbox');
}

function response_load_scripts() {
	// Enqueued scripts
	wp_enqueue_script('jquery-ui-core');
	wp_enqueue_script('jquery-ui-sortable');
	wp_enqueue_script('thickbox');
	wp_enqueue_script('color-picker', get_template_directory_uri().'/core/lib/js/colorpicker.js', array('jquery'));
	wp_enqueue_script('options-custom', get_template_directory_uri().'/core/lib/js/options-custom.js', array('jquery'));
	wp_enqueue_script('media-uploader', get_template_directory_uri().'/core/lib/js/of-medialibrary-uploader.js', array('jquery'));
}

// add core and theme settings to options page
add_action('admin_init', 'response_admin_init');
function response_admin_init(){
	
	// register theme options settings
	register_setting( 'response_options', 'response_options', 'response_options_validate' );
	
	// add all core settings
	do_action('response_add_settings');
}

// create and display theme options page
// TODO: Once Class is applied remove plugin_ slug
function response_options_page() {
	// TODO: Add translations to text
?>

	<div class="wrap">
		<div class="container-fluid cc-options">
			
			<form action="options.php" method="post">
				<?php settings_fields('response_options'); ?>
				<?php $sections_list = response_get_sections(); ?>
				<?php //var_dump($sections_list); ?>
				
			<!-- header -->
			<div class="row-fluid cc-header">
				<div class="span3 cc-title">
					<div class="icon32" id="icon-tools"> <br /> </div>
					<h2>Theme Options</h2>
				</div><!-- span3 -->
				<div class="span9">
					<ul class="cc-header-links">
						<li><a href="#">Support</a></li>
						<li><a href="#">Documentation</a></li>
						<li><a href="#">Buy Themes</a></li>
						<li><a href="#">Upgrade to Pro</a></li>
					</ul>
				</div><!-- span9 -->
			</div><!-- row-fluid -->
			<!-- end header -->
			
			<!-- start sub menu --> 
			<div class="row-fluid cc-submenu">
				<div class="span3 cc-collapse">
					<p><a href="#">Open All</a> / <a href="#">Collapse All</a></p>
				</div><!-- span3 -->
				<div class="span9">
					<ul class="cc-submenu-links btn-group">
						<li><a href="#" class="btn btn-inverse"><input name="Submit" type="submit" value="<?php esc_attr_e('Save All'); ?>" /></a></li>
						<li><a href="#" class="btn btn-inverse">Restore Settings</a></li>
					</ul>
				</div><!-- span 9 -->
			</div><!-- row fluid -->
			<!-- end sub menu -->
			
			<!-- start left menu --> 
			<div class="row-fluid cc-content">
				
				<div class="span2 cc-left-menu">
					<ul class="cc-parent">
						<?php foreach ( $sections_list as $section_parent => $section ) { ?>
							<li class="cc-active cc-has-children">
								<div class="cc-menu-arrow"></div><a class="" href="#"><?php echo $section['title']; ?><i class="icon-chevron-down"></i></a>
								<?php if ( $section['sections'] ) : ?>
									<ul class="cc-child" style="display:none;">
									<?php foreach ( $section['sections'] as $section_id => $section_details ) : ?>
										<li><a href="#"><?php echo $section_details['label']; ?></a></li>
									<?php endforeach; ?>
									</ul>
								<?php endif; ?>
							</li>
						<?php } ?>
					</ul>
				</div><!-- span 2 -->
				<!-- end left menu -->
				
				<!-- start main content -->
				<div class="span10 cc-main-content">
					<?php
					// Generate each sections markup
					foreach ( $sections_list as $section_parent => $section ) {
						if ($section['sections']) {
							echo '<div class="'.$section_parent.' cc-content-section">';
							do_settings_sections($section_parent);
							echo '</div>';
						}
					}
					?>
				</div><!-- span 10 -->
			</div><!-- row fluid -->
			<!-- end main content -->
			
			<!-- start footer -->
			<div class="row-fluid cc-footer">
				<div class="span6 cc-social">
					<p>CyberChimps <a href="#">Twitter</a> | <a href="#">Facebook</a></p>
				</div><!-- span 6 -->
				<div class="span6">
					<ul class="cc-submenu-links btn-group">
						<li><a href="#" class="btn btn-inverse"><input name="Submit" type="submit" value="<?php esc_attr_e('Save All'); ?>" /></a></li>
						<li><a href="#" class="btn btn-inverse">Restore Settings</a></li>
					</ul>
				</div><!-- span 6 -->
			</div><!-- row fluid -->
			<!-- end footer -->
				
			</form>
			
		</div><!-- container-fluid -->
	</div><!-- wrap -->
<?php
}

// TODO: Move to file in core folder
add_action('response_add_settings', 'response_add_core_settings');
function response_add_core_settings() {
	
	// Create sections
	$sections_list = response_get_sections();
	response_create_sections( $sections_list );
	
	// Create fields
	$fields_list = response_get_fields();
	response_create_fields( $fields_list );

}

// TODO: this is where we will build our default sections for the options page
function response_add_core_sections( $sections_list ) {
	$sections_list = array(
		'response_welcome' => array(
			'title' => __('Welcome', 'response'),
			'sections' => array(
				'response_core' => array(
					'label' => __('Welcome', 'response'),
					'description' => __('Welcome Description', 'response'),
				),
			),
		),
		'response_design' => array(
			'title' => __('Design', 'response'),
			'sections' => array(
				'response_header' => array(
					'label' => __('Header', 'response'),
					'description' => __('Header Description', 'response'),
				),
			),
		),
		'response_blog' => array(
			'title' => __('Blog', 'response'),
			'sections' => array(
				'response_test' => array(
					'label' => __('Test All Options', 'response'),
					'description' => __('This is the description of this section. We will show some information here.', 'response'),
				),
			),
		),
		'response_templates' => array(
			'title' => __('Templates', 'response'),
			'sections' => array(
				'response_option_one' => array(
					'label' => __('Option One', 'response'),
					'description' => __('Option One Description', 'response'),
				),
				'response_option_two' => array(
					'label' => __('Option Two', 'response'),
					'description' => __('Option Two Description', 'response'),
				),
			),
		),
		'response_footer' => array(
			'title' => __('Footer', 'response'),
		),
		'response_import_export' => array(
			'title' => __('Import/Export', 'response'),
		),
	);
	
	return $sections_list;
}
add_filter('response_section_list', 'response_add_core_sections');

function response_get_sections() {
	$sections_list = array();
	// pull in both default sections and users custom sections
	return apply_filters('response_section_list', $sections_list);
}

function response_create_sections( $sections ) {
	if ( empty($sections) )
		return false;
	
	// add in error checking and proper validation, escaping, and translation calls
	foreach( $sections as $section_parent => $section ) {
		if ($section['sections']) {
			foreach ( $section['sections'] as $section_id => $section_details ) {		
				// make sure section does not already exist before creating it
				if ( !response_section_exists( $section_parent, $section_id) ) {
					add_settings_section(
						$section_id,
						$section_details['label'],
						'response_sections_callback',
						$section_parent
					);
				}
			}
		}
	}
}

function response_sections_callback( $section_passed ) {
	$sections = response_get_sections();
	if ( $sections && $section_passed ) {
		foreach( $sections as $section_parent => $section ) {
			if ($section['sections']) {
				foreach ( $section['sections'] as $section_id => $section_details ) {
					if ($section_passed['id'] == $section_id ) {
						echo '<p>' . $section_details['description'] . '</p>';
					}
				}
			}
		}
	}
}

function response_section_exists( $section_parent, $section ) {
	global $wp_settings_sections;

	if ( $wp_settings_sections[$section_parent][$section] ) {
		return true;
	}
	
	return false;
}

// TODO: this is where we will build our default sections for the options page
function response_add_core_fields( $fields_list ) {
	
	$fields_list = array();
	
	/* EXAMPLE FROM Options Framework
		TODO: source code from here
	$options[] = array(
		'name' => __('Select a Page', 'options_framework_theme'),
		'desc' => __('Passed an pages with ID and post_title', 'options_framework_theme'),
		'id' => 'example_select_pages',
		'type' => 'select',
		'options' => $options_pages);
	
	$fields_list[] = array(
		'id' => 'core_text',
		'name' => __('Text Input', 'response'),
		'desc' => __('Description of text input field', 'response'),
		'type' => 'text',
		'default' => 'Default Field Value');	
		
	*/
	
	$fields_list[] = array(
		'id' => 'core_text',
		'label' => __('Text Input', 'response'),
		'section' => 'response_test',
		'section_parent' => 'response_blog',
		'field' => array(
			'type' => 'text',
			'default' => 'Testing the text input'
		)
	);
	
	$fields_list[] = array(
		'id' => 'core_textarea',
		'label' => __('Textarea', 'response'),
		'section' => 'response_test',
		'section_parent' => 'response_blog',
		'field' => array(
			'type' => 'textarea',
			'default' => 'Test textarea text',
			'settings' => array( 'size' => '', 'cols' => 256, 'rows' => 8 ),
		)
	);	
	
	$fields_list[] = array(
		'id' => 'core_select',
		'label' => __('Select Input', 'response'),
		'section' => 'response_test',
		'section_parent' => 'response_blog',
		'field' => array(
			'type' => 'select',
			'default' => 1,
			'options' => array( 0 => 'False', 1 => 'True')
		)
	);
	
	$fields_list[] = array(
		'id' => 'core_radio',
		'label' => __('Radio Input', 'response'),
		'section' => 'response_test',
		'section_parent' => 'response_blog',
		'field' => array(
			'type' => 'radio',
			'default' => 1,
			'options' => array( 0 => 'False', 1 => 'True')
		)
	);
	
	$fields_list[] = array(
		'id' => 'core_checkbox',
		'label' => __('Checkbox Input', 'response'),
		'section' => 'response_test',
		'section_parent' => 'response_blog',
		'field' => array(
			'type' => 'checkbox',
			'default' => 'True',
			'options' => 'True'
		)
	);
	
	$fields_list[] = array(
		'id' => 'core_multicheck',
		'label' => __('Multicheck Input', 'response'),
		'section' => 'response_test',
		'section_parent' => 'response_blog',
		'field' => array(
			'type' => 'multicheck',
			'default' => 1,
			'options' => array( 0 => 'False', 1 => 'True')
		)
	);
	
	$fields_list[] = array(
		'id' => 'core_color',
		'label' => __('Color Input', 'response'),
		'section' => 'response_test',
		'section_parent' => 'response_blog',
		'field' => array(
			'type' => 'color',
			'default' => '#000000',
		)
	);
	
	$fields_list[] = array(
		'id' => 'core_images',
		'label' => __('Images Selection', 'response'),
		'section' => 'response_test',
		'section_parent' => 'response_blog',
		'field' => array(
			'type' => 'images',
			'default' => 0,
			'options' => array( 0 => 'False', 1 => 'True')
		)
	);
			
	$fields_list[] = array(
		'id' => 'core_image_uploader',
		'label' => __('Image Uploader', 'response'),
		'section' => 'response_test',
		'section_parent' => 'response_blog',
		'field' => array(
			'type' => 'upload',
			'default' => 0,
			'options' => array( 0 => 'False', 1 => 'True')
		)
	);
	
	return $fields_list;
}
add_filter('response_field_list', 'response_add_core_fields');

function response_get_fields() {
	$fields_list = array();
	// pull in both default fields and users custom fields
	return apply_filters('response_field_list', $fields_list);
}

function response_create_fields( $fields ) {
	if ( empty($fields) )
		return false;
		
	// loop through and create each field
	foreach ($fields as $field_args) {
		$field_defaults = array(
			'id' => false,
			'label' => __('Default Field', 'response'),
			'callback' => 'response_fields_callback',
			'section' => 'response_core',
			'section_parent' => 'response',
		);
		$field_args = wp_parse_args( $field_args, $field_defaults );
		/*
		$field_defaults = array(
			'type' => 'text',
			'default' => '',
			'description' => '',
			'options' => array(),
			'settings' => array( 'size' => '', 'cols' => 24, 'rows' => 8 ),
		);
		*/
		//$setting_args['field'] = wp_parse_args( $setting_args['field'], $field_defaults );
		
		if ( !empty($field_args['id']) ) {
			add_settings_field(
				'response_' . $field_args['id'],
				$field_args['label'],
				$field_args['callback'],
				$field_args['section_parent'],
				$field_args['section'],
				$field_args
			);
		}
	}
}

function response_fields_callback( $args ) {

	$options = get_option('response_options');
	
	// set default value if not set
	$value = (isset($options[$args['id']])) ? $options[$args['id']] : $args['field']['default'];
	
	// TODO: REMOVE DEBUGGING
	//var_dump($value);
	
	// TODO: create function to generate HTML markup. Base it off of Options Framework switch statements
	$output = '';
	switch ( $args['field']['type'] ) {
		// Basic text input
		case 'text':
			$output .= '<input class="of-input" id="'.esc_attr($args['id']).'" name="response_options['.esc_attr($args['id']).']" type="text" value="'.esc_attr($value).'" />';
		break;
		
		/* TODO: Clean*/
		// Textarea
		case 'textarea':

			$cols = (isset($args['field']['settings']['cols'])) ? $args['field']['settings']['cols'] : '24';
			$rows = (isset($args['field']['settings']['rows'])) ? $args['field']['settings']['rows'] : '8';
			$value = stripslashes( $value );
			
			$output .= '<textarea class="of-input" id="'.esc_attr($args['id']).'" name="response_options['.esc_attr($args['id']).']" cols="'.esc_attr($cols).'" rows="'.esc_attr($rows).'">'.esc_textarea($value).'</textarea>';
		break;
		
		// Select Box
		case 'select':
			$output .= '<select class="of-input" id="'.esc_attr($args['id']).'" name="response_options['.esc_attr($args['id']).']">';
			foreach ($args['field']['options'] as $key => $option ) {
				$output .= '<option'. selected($value, $key, false) .' value="'.esc_attr($key).'">'.esc_html($option).'</option>';
			}
			$output .= '</select>';
		break;
		
		// Radio Box
		case "radio":
			foreach ($args['field']['options'] as $key => $option) {
				$output .= '<input class="of-input of-radio" id="'.esc_attr($args['id']).'" name="response_options['.esc_attr($args['id']).']" type="radio" value="'.esc_attr($key).'" '. checked( $value, $key, false) .' /><label for="'.esc_attr($args['id']).'">'.esc_html($option).'</label><br />';
			}
		break;
		
		// Checkbox
		case "checkbox":
			$output .= '<input class="checkbox of-input" id="'.esc_attr($args['id']).'" name="response_options['.esc_attr($args['id']).']" type="checkbox" '. checked( $value, 1, false) .' value="'.esc_attr($args['field']['options']).'"/>';
			$output .= '<label class="explain" for="'.esc_attr($args['id']).'">'.esc_attr($value).'</label>';
		break;
		
		// Multicheck
		case "multicheck":
			//foreach ($args['field']['options'] as $key => $option) {
			

			foreach ($value['options'] as $key => $option) {
				$checked = '';
				$label = $option;
				$option = preg_replace('/\W/', '', strtolower($key));

				$id = $option_name . '-' . $value['id'] . '-'. $option;
				$name = $option_name . '[' . $value['id'] . '][' . $option .']';

			    if ( isset($val[$option]) ) {
					$checked = checked($val[$option], 1, false);
				}

				$output .= '<input id="' . esc_attr( $id ) . '" class="checkbox of-input" type="checkbox" name="' . esc_attr( $name ) . '" ' . $checked . ' /><label for="' . esc_attr( $id ) . '">' . esc_html( $label ) . '</label><br />';
			}
		break;
		
		// Color picker
		case "color":
			$output .= '<div id="response_'.esc_attr($args['id'] . '_picker').'" class="colorSelector"><div style="'.esc_attr('background-color:'.$value).'"></div></div>';
			$output .= '<input class="of-color" id="'.esc_attr($args['id']).'" name="response_options['.esc_attr($args['id']).']" type="text" value="'.esc_attr($value).'" />';
		break; 
		
		/* TODO: Clean */
		// Image Selectors
		case "images":
			//$name = $option_name .'['. $value['id'] .']';
			foreach ($args['field']['options'] as $key => $option) {
				
				$selected = '';
				$checked = '';
				if ( $val != '' ) {
					if ( $val == $key ) {
						$selected = ' of-radio-img-selected';
						$checked = ' checked="checked"';
					}
				}
				$output .= '<input type="radio" id="' . esc_attr( $value['id'] .'_'. $key) . '" class="of-radio-img-radio" value="' . esc_attr( $key ) . '" name="' . esc_attr( $name ) . '" '. $checked .' />';
				$output .= '<div class="of-radio-img-label">' . esc_html( $key ) . '</div>';
				$output .= '<img src="' . esc_url( $option ) . '" alt="' . $option .'" class="of-radio-img-img' . $selected .'" onclick="document.getElementById(\''. esc_attr($value['id'] .'_'. $key) .'\').checked=true;" />';
			}
		break;
		
		/* TODO: Clean
		// Uploader
		case "upload":
			// $output .= optionsframework_medialibrary_uploader( $value['id'], $val, null ); // New AJAX Uploader using Media Library	
			if(isset($val['url'])) {
				$output .= "Preview: " . "<img src='{$val['url']}' width='350px' height='50px'/><br/>";
			}
			$output .= " &nbsp;&nbsp;&nbsp;&nbsp; URL <input type='text' name='{$value['id']}_text' size='72' value='" . (isset($val['url']) ? $val['url'] : "") . "'/>";
			$output .= " or upload File: <input type='file' id='{$value['id']}' name='{$value['id']}'>";
		break;
		*/
	}
	
	echo $output;
}

// validate our options
function response_options_validate( $input ) {
	
	// validate all core settings and return validated fields
	$newinput = apply_filters( 'response_validate_settings_filter', $input );
	
	// return final value (TODO: Maybe add additional security filtering here in case user hasnt done anything)
	return $newinput;
}

// validate core options
add_filter( 'response_validate_core_settings_filter', 'response_validate_core_settings', 10, 1 );
function response_validate_core_settings( $input ) {
	
	$newinput = $input;
	
	// TODO: Add validation for fields
	
	return $newinput;
}